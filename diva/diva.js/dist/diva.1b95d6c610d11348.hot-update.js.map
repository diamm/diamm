{"version":3,"file":"diva.1b95d6c610d11348.hot-update.js","sources":["webpack://diva.js/./source/js/image-manifest.ts"],"sourcesContent":["import parseIIIFManifest from './parse-iiif-manifest';\nimport IIIFSourceAdapter from \"./iiif-source-adapter\";\nimport {\n    Dimension,\n    DivaServiceBlock,\n    DivaTiledPage,\n    DivaTileSource,\n    HWDimension,\n    OptionalDimension\n} from \"./viewer-type-definitions\";\n\n\nexport default class ImageManifest\n{\n    pages: any[];\n    maxZoom: number;\n    maxRatio: number;\n    minRatio: number;\n    itemTitle: string;\n    metadata: object;\n    paged: boolean;\n    _maxWidths: number[];\n    _maxHeights: number[];\n    _averageWidths: number[];\n    _averageHeights: number[];\n    _totalHeights: number[];\n    _totalWidths: number[];\n    _urlAdapter: IIIFSourceAdapter;\n\n    constructor (data: DivaServiceBlock, urlAdapter: IIIFSourceAdapter)\n    {\n        // Save all the data we need\n        this.pages = data.pgs;\n        this.maxZoom = data.max_zoom;\n        this.maxRatio = data.dims.max_ratio;\n        this.minRatio = data.dims.min_ratio;\n        this.itemTitle = data.item_title;\n        this.metadata = data.metadata;\n\n        // Only given for IIIF manifests\n        this.paged = data.paged;\n\n        // These are arrays, the index corresponding to the zoom level\n        this._maxWidths = data.dims.max_w;\n        this._maxHeights = data.dims.max_h;\n        this._averageWidths = data.dims.a_wid;\n        this._averageHeights = data.dims.a_hei;\n        this._totalHeights = data.dims.t_hei;\n        this._totalWidths = data.dims.t_wid;\n\n        this._urlAdapter = urlAdapter;\n    }\n\n    static fromIIIF (iiifManifest: object): ImageManifest\n    {\n        const data: DivaServiceBlock = parseIIIFManifest(iiifManifest)!;\n        return new ImageManifest(data, new IIIFSourceAdapter());\n    }\n\n    isPageValid (pageIndex: number, showNonPagedPages: boolean): boolean\n    {\n        if (!showNonPagedPages && this.paged && !this.pages[pageIndex].paged)\n        {\n            return false;\n        }\n\n        return pageIndex >= 0 && pageIndex < this.pages.length;\n    }\n\n    getMaxPageDimensions (pageIndex: number): Dimension\n    {\n        const maxDims: HWDimension = this.pages[pageIndex].d[this.maxZoom];\n\n        return {\n            height: maxDims.h,\n            width: maxDims.w\n        };\n    }\n\n    getPageDimensionsAtZoomLevel (pageIndex: number, zoomLevel: number): Dimension\n    {\n        const maxDims: HWDimension = this.pages[pageIndex].d[this.maxZoom];\n\n        const scaleRatio: number = getScaleRatio(this.maxZoom, zoomLevel);\n\n        return {\n            height: maxDims.h * scaleRatio,\n            width: maxDims.w * scaleRatio\n        };\n    }\n\n    /**\n     * Returns a URL for the image of the given page. The optional size\n     * parameter supports setting the image width or height (default is\n     * full-sized).\n     */\n    getPageImageURL (pageIndex: number, size: OptionalDimension): string\n    {\n        return this._urlAdapter.getPageImageURL(this, pageIndex, size);\n    }\n\n    /**\n     * Return an array of tile objects for the specified page and integer zoom level\n     */\n    getPageImageTiles (pageIndex: number, zoomLevel: number, tileDimensions: Dimension): DivaTiledPage\n    {\n        const page = this.pages[pageIndex];\n\n        if (!isFinite(zoomLevel) || zoomLevel % 1 !== 0)\n        {\n            throw new TypeError('Zoom level must be an integer: ' + zoomLevel);\n        }\n\n        const rows = Math.ceil(page.d[zoomLevel].h / tileDimensions.height);\n        const cols = Math.ceil(page.d[zoomLevel].w / tileDimensions.width);\n\n        const tiles: DivaTileSource[] = [];\n\n        let row, col, url;\n\n        for (row = 0; row < rows; row++)\n        {\n            for (col = 0; col < cols; col++)\n            {\n                url = this._urlAdapter.getTileImageURL(this, pageIndex, {\n                    row: row,\n                    col: col,\n                    rowCount: rows,\n                    colCount: cols,\n                    zoomLevel: zoomLevel,\n                    tileDimensions: tileDimensions\n                });\n\n                // FIXME: Dimensions should account for partial tiles (e.g. the\n                // last row and column in a tiled image)\n                tiles.push({\n                    row: row,\n                    col: col,\n                    zoomLevel: zoomLevel,\n                    dimensions: {\n                        height: tileDimensions.height,\n                        width: tileDimensions.width\n                    },\n                    offset: {\n                        top: row * tileDimensions.height,\n                        left: col * tileDimensions.width\n                    },\n                    url: url\n                });\n            }\n        }\n\n        return {\n            zoomLevel: zoomLevel,\n            rows: rows,\n            cols: cols,\n            tiles: tiles\n        };\n    }\n\n    getAverageWidth (zoomLevel: number): number\n    {\n        return this._averageWidths[zoomLevel]\n    }\n\n    getAverageHeight (zoomLevel: number): number\n    {\n        return this._averageHeights[zoomLevel]\n    }\n    getMaxWidth (zoomLevel: number): number\n    {\n        return this._maxWidths[zoomLevel]\n    }\n\n    getMaxHeight (zoomLevel: number): number\n    {\n        return this._maxHeights[zoomLevel]\n    }\n    getTotalWidth (zoomLevel: number): number\n    {\n        return this._totalWidths[zoomLevel]\n    }\n\n    getTotalHeight (zoomLevel: number): number\n    {\n        return this._totalHeights[zoomLevel]\n    }\n}\n\nfunction zoomedPropertyGetter (privateName: string)\n{\n    return function (zoomLevel: number)\n    {\n        return this[privateName][zoomLevel];\n    };\n}\n\nfunction getScaleRatio (sourceZoomLevel: number, targetZoomLevel: number): number\n{\n    return 1 / Math.pow(2, sourceZoomLevel - targetZoomLevel);\n}\n"],"names":[],"mappings":";;;;;;;;;;;AAAA;AACA;AAWA;AAyCA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;AAIA;AAGA;AACA;AAEA;;AAEA;AAGA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AA7JA;AAfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAwIA;AA/KA;AAiLA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA"}