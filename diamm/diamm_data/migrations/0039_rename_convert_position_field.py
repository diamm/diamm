# Generated by Django 5.2.7 on 2025-10-28 13:05

from django.db import migrations, models


def migrate_position_to_float(apps, schema_editor):
    """
    Convert legacy_position_ms (text-ish) to position_ms (FloatField) using one
    PostgreSQL UPDATE. We:
      - trim whitespace
      - accept integers, decimals, and scientific notation with optional sign
      - cast to double precision
      - set NULL for anything that doesn't parse
    """
    qn = schema_editor.connection.ops.quote_name
    table = qn("diamm_data_item")
    col_legacy = qn("legacy_position_ms")
    col_new = qn("position_ms")

    # Regex matches:
    #   [+-]? ( (\d+(\.\d*)?) | (\.\d+) ) ([eE][+-]?\d+)?
    # which covers ints, floats like 12., .34, 12.34, and scientific notation.
    sql = f"""
        UPDATE {table}
        SET {col_new} = CASE
            WHEN {col_legacy} IS NULL THEN NULL
            WHEN btrim({col_legacy}) ~ '^[+-]?((\\d+(\\.\\d*)?)|(\\.\\d+))([eE][+-]?\\d+)?$'
                THEN (btrim({col_legacy}))::double precision
            ELSE NULL
        END;
    """
    schema_editor.execute(sql)


class Migration(migrations.Migration):
    dependencies = [
        ("diamm_data", "0038_alter_compositionbibliography_options_and_more"),
    ]

    operations = [
        migrations.AddField(
            model_name="item",
            name="position_ms",
            field=models.FloatField(blank=True, null=True)
        ),
        migrations.RunPython(migrate_position_to_float),
        migrations.RemoveField(
            model_name='item',
            name='legacy_position_ms',
        )
    ]
