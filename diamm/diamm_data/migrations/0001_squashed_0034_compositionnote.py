# -*- coding: utf-8 -*-
# Generated by Django 1.11.5 on 2017-12-13 21:45
from __future__ import unicode_literals

import diamm.helpers.storage
import diamm.models.data.source_note
from django.db import migrations, models
import django.db.models.deletion


# Functions from the following migrations need manual copying.
# Move them and any dependencies into this file, then update the
# RunPython operations to refer to the local versions:
# diamm.diamm_data.migrations.0007_auto_20161223_1145
def migrate_str_to_integer(apps, schema_editor):
    mapping = {
        'mixed': 1,
        'foliation': 2,
        'pagination': 3,
        'none': 4
    }
    Source = apps.get_model('diamm_data', 'Source')
    for source in Source.objects.all():
        source.numbering_system = mapping.get(source.numbering_system, None)
        source.save()


class Migration(migrations.Migration):

    replaces = [('diamm_data', '0001_initial'), ('diamm_data', '0002_auto_20161215_1737'), ('diamm_data', '0003_auto_20161216_0840'), ('diamm_data', '0004_sourcenote_sort'), ('diamm_data', '0005_item_item_title'), ('diamm_data', '0006_item_legacy_composition'), ('diamm_data', '0007_auto_20161223_1145'), ('diamm_data', '0008_auto_20161223_1545'), ('diamm_data', '0009_auto_20161226_2039'), ('diamm_data', '0010_auto_20170123_1608'), ('diamm_data', '0011_auto_20170218_1619'), ('diamm_data', '0012_auto_20170318_0753'), ('diamm_data', '0013_auto_20170323_0724'), ('diamm_data', '0014_auto_20170325_1553'), ('diamm_data', '0015_auto_20170325_1716'), ('diamm_data', '0016_auto_20170326_1355'), ('diamm_data', '0017_auto_20170425_1722'), ('diamm_data', '0018_auto_20170527_1613'), ('diamm_data', '0019_auto_20170527_1621'), ('diamm_data', '0020_auto_20170609_1636'), ('diamm_data', '0020_auto_20170708_2214'), ('diamm_data', '0021_merge_20170708_2235'), ('diamm_data', '0022_auto_20170716_1222'), ('diamm_data', '0023_auto_20170716_1247'), ('diamm_data', '0024_auto_20170716_1252'), ('diamm_data', '0025_delete_pagecondition'), ('diamm_data', '0026_auto_20170716_1451'), ('diamm_data', '0027_auto_20170722_1931'), ('diamm_data', '0021_auto_20170708_2252'), ('diamm_data', '0028_merge_20170722_2117'), ('diamm_data', '0029_auto_20170831_1702'), ('diamm_data', '0030_auto_20170929_1705'), ('diamm_data', '0031_auto_20170929_1709'), ('diamm_data', '0032_auto_20171116_1953'), ('diamm_data', '0033_auto_20171119_0242'), ('diamm_data', '0034_compositionnote')]

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Archive',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(default='S.N.', max_length=512)),
                ('siglum', models.CharField(blank=True, max_length=64, null=True)),
                ('librarian', models.CharField(blank=True, max_length=255, null=True)),
                ('secondary_contact', models.CharField(blank=True, max_length=255, null=True)),
                ('former_name', models.CharField(blank=True, max_length=512, null=True)),
                ('address_1', models.TextField(blank=True, null=True)),
                ('address_2', models.TextField(blank=True, null=True)),
                ('address_3', models.TextField(blank=True, null=True)),
                ('address_4', models.TextField(blank=True, null=True)),
                ('address_5', models.TextField(blank=True, null=True)),
                ('address_6', models.TextField(blank=True, null=True)),
                ('address_7', models.TextField(blank=True, null=True)),
                ('address_8', models.TextField(blank=True, null=True)),
                ('fax', models.CharField(blank=True, max_length=128, null=True)),
                ('telephone', models.CharField(blank=True, max_length=128, null=True)),
                ('website', models.CharField(blank=True, max_length=1024, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('logo', models.FileField(blank=True, null=True, storage=diamm.helpers.storage.OverwriteStorage(), upload_to='/Users/ahankins/Documents/code/git/diamm/diamm/media/archives')),
                ('copyright_statement', models.TextField(blank=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['city__name', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ArchiveNote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.IntegerField(choices=[(1, 'Private'), (2, 'Other Names')])),
                ('note', models.TextField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('archive', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notes', to='diamm_data.Archive')),
            ],
        ),
        migrations.CreateModel(
            name='Bibliography',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=1024)),
                ('year', models.CharField(blank=True, max_length=256, null=True)),
                ('abbreviation', models.CharField(blank=True, max_length=128, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Bibliography Entry',
                'verbose_name_plural': 'Bibliography Entries',
            },
        ),
        migrations.CreateModel(
            name='BibliographyAuthor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_name', models.CharField(max_length=512)),
                ('first_name', models.CharField(blank=True, max_length=512, null=True)),
            ],
            options={
                'ordering': ('last_name', 'first_name'),
            },
        ),
        migrations.CreateModel(
            name='BibliographyAuthorRole',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.IntegerField(choices=[(1, 'Author'), (2, 'Editor'), (3, 'Compiler'), (4, 'Festschrift Dedicatee'), (5, 'Collaborator'), (6, 'Indexer'), (7, 'Later Editor'), (8, 'Publisher'), (9, 'Reviewer'), (10, 'Reviser'), (11, 'Supervisor'), (12, 'Translator'), (13, 'Copyist')])),
                ('position', models.IntegerField(default=1, help_text='The position of this author in the author list.')),
                ('bibliography_author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bibliography_entries', to='diamm_data.BibliographyAuthor')),
                ('bibliography_entry', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='authors', to='diamm_data.Bibliography')),
            ],
            options={
                'ordering': ('position',),
            },
        ),
        migrations.CreateModel(
            name='BibliographyPublication',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('entry', models.CharField(max_length=2048)),
                ('type', models.IntegerField(choices=[(1, 'Volume Number'), (2, 'Title of Parent Entry (i.e., Book title, Journal title)'), (3, 'Title and Location of Publisher'), (4, 'Pages'), (5, 'University and Department (for Dissertations)'), (6, 'Degree (for Dissertations)'), (8, 'Series Title (NB: Use Parent Title for journal names)'), (9, 'URL'), (10, 'URL Accessed Date'), (11, 'Translator Statement'), (12, 'Festschrift Dedicatee'), (13, 'Place of Publication'), (14, 'Number of Volumes in Series')])),
                ('bibliography', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='publication_info', to='diamm_data.Bibliography')),
            ],
            options={
                'verbose_name': 'Additional Publication Info',
                'verbose_name_plural': 'Additional Publication Info',
            },
        ),
        migrations.CreateModel(
            name='BibliographyType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=512)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Clef',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=32)),
            ],
        ),
        migrations.CreateModel(
            name='Composition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=1024)),
                ('legacy_genre', models.CharField(blank=True, help_text='Stores the legacy value for the genre field.', max_length=512, null=True)),
                ('anonymous', models.BooleanField(default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ('title',),
            },
        ),
        migrations.CreateModel(
            name='CompositionBibliography',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pages', models.CharField(blank=True, max_length=256, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('bibliography', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='diamm_data.Bibliography')),
                ('composition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='diamm_data.Composition')),
            ],
        ),
        migrations.CreateModel(
            name='CompositionComposer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uncertain', models.BooleanField(default=False)),
                ('notes', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='CompositionCycle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField(blank=True, null=True)),
                ('composition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='diamm_data.Composition')),
            ],
        ),
        migrations.CreateModel(
            name='Cycle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=256)),
            ],
            options={
                'ordering': ('title',),
            },
        ),
        migrations.CreateModel(
            name='CycleType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256)),
            ],
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=128)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='GeographicArea',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('type', models.IntegerField(choices=[(1, 'City'), (2, 'Country'), (3, 'County/Province/State/Canton'), (4, 'Region/Cultural area/Protectorate'), (5, 'Fictional/Imaginary')], help_text='The region type.')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Image',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('location', models.URLField(blank=True, max_length=1024, null=True)),
                ('legacy_id', models.CharField(blank=True, max_length=256, null=True)),
                ('legacy_filename', models.CharField(blank=True, max_length=1024, null=True)),
                ('iiif_response_cache', models.TextField(blank=True, null=True, verbose_name='IIIF Image Response')),
                ('public', models.BooleanField(default=False)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='ImageNote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.IntegerField(choices=[(1, 'General'), (2, 'Capture Conditions'), (3, 'Capture Device')])),
                ('note', models.TextField()),
                ('image', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='diamm_data.Image')),
            ],
        ),
        migrations.CreateModel(
            name='ImageType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=512)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Item',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('source_attribution', models.CharField(blank=True, help_text='The attribution in the source', max_length=1024, null=True)),
                ('source_incipit', models.TextField(blank=True, help_text='The incipit in the source', null=True)),
                ('layout', models.IntegerField(blank=True, choices=[(1, 'Score'), (2, 'Parts')], help_text='Arrangement of pieces on the page', null=True)),
                ('folio_start', models.CharField(blank=True, max_length=256, null=True)),
                ('folio_end', models.CharField(blank=True, max_length=256, null=True)),
                ('num_voices', models.CharField(blank=True, max_length=32, null=True)),
                ('legacy_position_ms', models.CharField(blank=True, max_length=256, null=True)),
                ('source_order', models.IntegerField(blank=True, null=True)),
                ('page_order', models.IntegerField(default=0)),
                ('incipit', models.FileField(blank=True, null=True, storage=diamm.helpers.storage.OverwriteStorage(), upload_to='/Users/ahankins/Documents/code/git/diamm/diamm/media/rism/incipits')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('composition', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sources', to='diamm_data.Composition')),
            ],
            options={
                'ordering': ('folio_start',),
            },
        ),
        migrations.CreateModel(
            name='ItemBibliography',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('pages', models.CharField(blank=True, max_length=256, null=True)),
                ('notes', models.TextField(blank=True, null=True)),
                ('bibliography', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='diamm_data.Bibliography')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='diamm_data.Item')),
            ],
            options={
                'ordering': ('bibliography__year',),
                'verbose_name_plural': 'Item Bibliographies',
            },
        ),
        migrations.CreateModel(
            name='ItemComposer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uncertain', models.BooleanField(default=False)),
                ('note', models.TextField(blank=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='ItemNote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.IntegerField(choices=[(1, 'General Note'), (2, 'Copying Style'), (3, 'Concordances'), (4, 'Layout'), (5, 'Position on Page'), (6, 'Non-music contents description')])),
                ('note', models.TextField()),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notes', to='diamm_data.Item')),
            ],
        ),
        migrations.CreateModel(
            name='Language',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=64)),
            ],
        ),
        migrations.CreateModel(
            name='LegacyId',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256)),
            ],
        ),
        migrations.CreateModel(
            name='Mensuration',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sign', models.CharField(blank=True, max_length=64, null=True)),
                ('text', models.CharField(max_length=256)),
            ],
        ),
        migrations.CreateModel(
            name='Notation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=64, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='s.n.', max_length=1024)),
                ('variant_names', models.CharField(blank=True, max_length=1024, null=True)),
                ('legacy_id', models.CharField(blank=True, max_length=64, null=True)),
                ('note', models.TextField(blank=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('archive', models.ForeignKey(blank=True, help_text='\n        If an organization has an equivalent entry in the Organizations table,\n        enter it here and the two will be linked.\n    ', null=True, on_delete=django.db.models.deletion.CASCADE, to='diamm_data.Archive')),
                ('location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='diamm_data.GeographicArea')),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='OrganizationType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='None', max_length=512)),
            ],
        ),
        migrations.CreateModel(
            name='Page',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('numeration', models.CharField(help_text='The folio or page number. If there are many different systems in use,\n                                                           choose one and put the others in the note field.', max_length=64)),
                ('legacy_id', models.CharField(blank=True, max_length=64, null=True)),
                ('sort_order', models.IntegerField(default=0)),
            ],
            options={
                'ordering': ['source__shelfmark', 'numeration'],
            },
        ),
        migrations.CreateModel(
            name='PageCondition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('condition', models.CharField(max_length=256)),
            ],
        ),
        migrations.CreateModel(
            name='PageNote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.IntegerField(choices=[(1, 'Decoration Colour'), (2, 'Decoration Style'), (3, 'Decorated Initial'), (4, 'Decorated Initial Colour')])),
                ('note', models.TextField()),
                ('page', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notes', to='diamm_data.Page')),
            ],
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_name', models.CharField(help_text="Last name, or full name if it does not follow convention, e.g., 'Louis of Bavaria'", max_length=512)),
                ('first_name', models.CharField(blank=True, max_length=512, null=True)),
                ('title', models.CharField(blank=True, help_text='Personal title, e.g., Duke, Count, Pope.', max_length=512, null=True)),
                ('earliest_year', models.IntegerField(blank=True, null=True)),
                ('earliest_year_approximate', models.BooleanField(default=False)),
                ('latest_year', models.IntegerField(blank=True, null=True)),
                ('latest_year_approximate', models.BooleanField(default=False)),
                ('legacy_id', models.CharField(max_length=64)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['last_name', 'first_name'],
                'verbose_name_plural': 'People',
            },
        ),
        migrations.CreateModel(
            name='PersonNote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('note', models.TextField()),
                ('type', models.IntegerField(choices=[(1, 'Biography'), (2, 'Variant Name'), (3, 'Date')])),
                ('public', models.BooleanField(default=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notes', to='diamm_data.Person')),
            ],
        ),
        migrations.CreateModel(
            name='PersonRole',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('earliest_year', models.IntegerField(blank=True, null=True)),
                ('latest_year', models.IntegerField(blank=True, null=True)),
                ('note', models.TextField(blank=True, null=True)),
                ('person', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='diamm_data.Person')),
            ],
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=1024)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Set',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cluster_shelfmark', models.CharField(blank=True, max_length=255, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('type', models.IntegerField(choices=[(1, 'Partbooks'), (2, 'Fragments of a whole'), (3, 'Linked by Origin or Contents'), (4, 'Non-music Collection'), (5, 'Copyist or Scribal Concordance'), (6, 'Source bound in separate volumes'), (7, 'Project Collection')])),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
        ),
        migrations.CreateModel(
            name='SetBibliography',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notes', models.TextField(blank=True, null=True)),
                ('pages', models.TextField(blank=True, null=True)),
                ('bibliography', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sets', to='diamm_data.Bibliography')),
                ('set', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bibliographies', to='diamm_data.Set')),
            ],
        ),
        migrations.CreateModel(
            name='Source',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=255, null=True)),
                ('shelfmark', models.CharField(blank=True, max_length=255, null=True)),
                ('type', models.CharField(blank=True, help_text="A brief description of the source,\n                                                                             e.g, 'chant book with added polyphony'", max_length=255, null=True)),
                ('surface', models.IntegerField(blank=True, choices=[(1, 'Parchment'), (2, 'Paper'), (3, 'Vellum'), (4, 'Wood'), (5, 'Slate'), (6, 'Mixed Paper and Parchment'), (7, 'Other')], null=True)),
                ('inventory_provided', models.BooleanField(default=False, help_text='Use this checkbox to mark whether DIAMM has provided an inventory for this\n    source. Note that if there are items attached to this source they will still appear, but there will be a note on\n    the source record stating that DIAMM has not provided an inventory.')),
                ('start_date', models.IntegerField(blank=True, help_text='Enter the start year as a four digit integer. If\n                                     the precise year is not known, enter it rounding DOWN to the closest\n                                     decade, and then century. Examples: 1456, 1450, 1400.\n                                     ', null=True)),
                ('end_date', models.IntegerField(blank=True, help_text='Enter the end year as a four digit integer. If the\n                                   precise year is not known, enter it rounding UP to the\n                                   closest decade, and then century. Examples: 1456, 1460, 1500.\n                                   ', null=True)),
                ('date_statement', models.CharField(blank=True, max_length=512, null=True)),
                ('format', models.CharField(blank=True, max_length=255, null=True)),
                ('measurements', models.CharField(blank=True, max_length=512, null=True)),
                ('public', models.BooleanField(default=False, help_text='Source Description is Public')),
                ('public_images', models.BooleanField(default=False, help_text='Source Images are Public')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('sort_order', models.IntegerField(blank=True, null=True)),
                ('archive', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sources', to='diamm_data.Archive')),
                ('cover_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='diamm_data.Image')),
                ('notations', models.ManyToManyField(blank=True, to='diamm_data.Notation')),
            ],
            options={
                'ordering': ['archive__city__name', 'sort_order'],
            },
        ),
        migrations.CreateModel(
            name='SourceBibliography',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('primary_study', models.BooleanField(default=False)),
                ('notes', models.TextField(blank=True, null=True)),
                ('pages', models.TextField(blank=True, null=True)),
                ('bibliography', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sources', to='diamm_data.Bibliography')),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bibliographies', to='diamm_data.Source')),
            ],
        ),
        migrations.CreateModel(
            name='SourceCatalogueEntry',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('order', models.IntegerField(default=1)),
                ('entry', models.CharField(max_length=16)),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='catalogue_entries', to='diamm_data.Source')),
            ],
            options={
                'ordering': ('entry',),
                'verbose_name_plural': 'Source Catalogue Entries',
            },
        ),
        migrations.CreateModel(
            name='SourceCopyist',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uncertain', models.BooleanField(default=False)),
                ('type', models.IntegerField(blank=True, choices=[(1, 'Music'), (2, 'Text'), (3, 'Indexer'), (4, 'Liminary Text'), (5, 'Illuminator'), (6, 'Text and Music')], null=True)),
                ('object_id', models.PositiveIntegerField()),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='copyists', to='diamm_data.Source')),
            ],
        ),
        migrations.CreateModel(
            name='SourceIdentifier',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('identifier', models.CharField(max_length=255)),
                ('type', models.IntegerField(choices=[(2, 'RISM'), (3, 'CCM'), (4, 'EARP'), (5, 'olim (Former shelfmark)')])),
                ('note', models.TextField(blank=True, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='identifiers', to='diamm_data.Source')),
            ],
            options={
                'ordering': ('type',),
                'verbose_name': 'Source Identifier',
            },
        ),
        migrations.CreateModel(
            name='SourceNote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.IntegerField(choices=[(1, 'General Description'), (2, 'RISM Description'), (3, 'Census Catalogue of Music Description'), (4, 'Extent Note'), (5, 'Physical Description Note'), (6, 'Binding Note'), (7, 'Ownership Note'), (8, 'Watermark Note'), (9, 'Liminary Note'), (10, 'Notation Note'), (11, 'Date Note'), (12, 'Dedication Note'), (13, 'Ruling Note'), (14, 'Foliation Note'), (15, 'Decoration Note'), (16, 'Contents Note'), (17, 'Surface Note'), (18, 'DIAMM Note'), (99, 'Private Note')])),
                ('note', models.TextField()),
                ('author', models.CharField(blank=True, max_length=255, null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notes', to='diamm_data.Source')),
                ('sort', models.IntegerField(default=0)),
            ],
            options={
                'ordering': ('type',),
            },
        ),
        migrations.CreateModel(
            name='SourceProvenance',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('city_uncertain', models.BooleanField(default=False)),
                ('country_uncertain', models.BooleanField(default=False)),
                ('region_uncertain', models.BooleanField(default=False)),
                ('earliest_year', models.IntegerField(blank=True, null=True)),
                ('latest_year', models.IntegerField(blank=True, null=True)),
                ('note', models.TextField(blank=True, null=True)),
                ('object_id', models.PositiveIntegerField(blank=True, null=True)),
                ('entity_uncertain', models.BooleanField(default=False)),
                ('city', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='city_sources', to='diamm_data.GeographicArea')),
                ('content_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
                ('country', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='country_sources', to='diamm_data.GeographicArea')),
                ('protectorate', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='protectorate_sources', to='diamm_data.GeographicArea')),
                ('region', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='region_sources', to='diamm_data.GeographicArea')),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='provenance', to='diamm_data.Source')),
            ],
        ),
        migrations.CreateModel(
            name='SourceRelationship',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField()),
                ('uncertain', models.BooleanField(default=False)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
        ),
        migrations.CreateModel(
            name='SourceRelationshipType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=512)),
            ],
        ),
        migrations.CreateModel(
            name='SourceURL',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.IntegerField(choices=[(1, 'IIIF'), (2, 'Host Institution'), (3, 'Ancillary'), (4, 'External Images')])),
                ('link_text', models.CharField(blank=True, max_length=1024, null=True)),
                ('link', models.CharField(max_length=1024)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('source', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='links', to='diamm_data.Source')),
            ],
            options={
                'verbose_name': 'Source URL',
                'verbose_name_plural': 'Source URLs',
            },
        ),
        migrations.CreateModel(
            name='Text',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField()),
                ('incipit', models.CharField(blank=True, max_length=256, null=True)),
                ('legacy_id', models.CharField(blank=True, max_length=64, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Voice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('label', models.CharField(blank=True, max_length=256, null=True)),
                ('position', models.CharField(blank=True, max_length=256, null=True)),
                ('sort_order', models.IntegerField(blank=True, help_text='Used to sort e.g., Soprano, Alto, Tenor, Bass', null=True)),
                ('voice_text', models.TextField(blank=True, null=True)),
                ('legacy_id', models.CharField(blank=True, max_length=64, null=True)),
                ('clef', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='diamm_data.Clef')),
                ('item', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='voices', to='diamm_data.Item')),
                ('languages', models.ManyToManyField(to='diamm_data.Language')),
                ('mensuration', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='diamm_data.Mensuration')),
                ('standard_text', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='diamm_data.Text')),
            ],
        ),
        migrations.CreateModel(
            name='VoiceType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=256)),
                ('legacy_id', models.CharField(blank=True, max_length=64, null=True)),
            ],
        ),
        migrations.AddField(
            model_name='voice',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='diamm_data.VoiceType'),
        ),
        migrations.AddField(
            model_name='sourcerelationship',
            name='relationship_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='diamm_data.SourceRelationshipType'),
        ),
        migrations.AddField(
            model_name='sourcerelationship',
            name='source',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='relationships', to='diamm_data.Source'),
        ),
        migrations.AddField(
            model_name='set',
            name='bibliography',
            field=models.ManyToManyField(through='diamm_data.SetBibliography', to='diamm_data.Bibliography'),
        ),
        migrations.AddField(
            model_name='set',
            name='sources',
            field=models.ManyToManyField(related_name='sets', to='diamm_data.Source'),
        ),
        migrations.AddField(
            model_name='personrole',
            name='role',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='diamm_data.Role'),
        ),
        migrations.AddField(
            model_name='person',
            name='roles',
            field=models.ManyToManyField(through='diamm_data.PersonRole', to='diamm_data.Role'),
        ),
        migrations.AddField(
            model_name='page',
            name='source',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='pages', to='diamm_data.Source'),
        ),
        migrations.AddField(
            model_name='organization',
            name='type',
            field=models.ForeignKey(default=1, on_delete=django.db.models.deletion.CASCADE, to='diamm_data.OrganizationType'),
        ),
        migrations.AddField(
            model_name='itemcomposer',
            name='composer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='unattributed_works', to='diamm_data.Person'),
        ),
        migrations.AddField(
            model_name='itemcomposer',
            name='item',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='unattributed_composers', to='diamm_data.Item'),
        ),
        migrations.AddField(
            model_name='item',
            name='pages',
            field=models.ManyToManyField(blank=True, related_name='items', to='diamm_data.Page'),
        ),
        migrations.AddField(
            model_name='item',
            name='source',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='inventory', to='diamm_data.Source'),
        ),
        migrations.AddField(
            model_name='image',
            name='page',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='images', to='diamm_data.Page'),
        ),
        migrations.AddField(
            model_name='image',
            name='type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='diamm_data.ImageType'),
        ),
        migrations.AddField(
            model_name='geographicarea',
            name='legacy_id',
            field=models.ManyToManyField(to='diamm_data.LegacyId'),
        ),
        migrations.AddField(
            model_name='geographicarea',
            name='parent',
            field=models.ForeignKey(blank=True, help_text='If the area is subordinate to another (e.g., city to country),\n                               you can specify this here. Note that you should adhere to the pattern of only providing one-level-deep parent relationships,\n                               e.g., Cities should always belong to Countries, and not to regions or states. Regions should also only belong to a\n                               single Country, even if they border two countries. Thus the parent should always point to an object of type "Country".\n                               For regions where their historical provenance has changed (e.g., Alsace and France or Germany; Vienna and Austria or Prussia), you should choose the\n                               current affiliation.', null=True, on_delete=django.db.models.deletion.CASCADE, to='diamm_data.GeographicArea'),
        ),
        migrations.AddField(
            model_name='cycle',
            name='composer',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='diamm_data.Person'),
        ),
        migrations.AddField(
            model_name='cycle',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='diamm_data.CycleType'),
        ),
        migrations.AddField(
            model_name='compositioncycle',
            name='cycle',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='diamm_data.Cycle'),
        ),
        migrations.AddField(
            model_name='compositioncomposer',
            name='composer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='compositions', to='diamm_data.Person'),
        ),
        migrations.AddField(
            model_name='compositioncomposer',
            name='composition',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='composers', to='diamm_data.Composition'),
        ),
        migrations.AddField(
            model_name='composition',
            name='genres',
            field=models.ManyToManyField(blank=True, to='diamm_data.Genre'),
        ),
        migrations.AddField(
            model_name='bibliography',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='diamm_data.BibliographyType'),
        ),
        migrations.AddField(
            model_name='archive',
            name='city',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='archives', to='diamm_data.GeographicArea'),
        ),
        migrations.AddField(
            model_name='source',
            name='numbering_system',
            field=models.CharField(blank=True, choices=[('mixed', 'Mixed Foliation and Pagination'), ('foliation', 'Foliation'), ('pagination', 'Pagination'), ('none', 'None / Unknown')], max_length=32, null=True),
        ),
        migrations.AddField(
            model_name='item',
            name='item_title',
            field=models.CharField(blank=True, help_text='A title for this item record, ONLY if it is NOT linked to a composition.', max_length=1024, null=True),
        ),
        migrations.AddField(
            model_name='item',
            name='legacy_composition',
            field=models.CharField(blank=True, help_text='Used only to record a composition that has been converted to an item-only record', max_length=32, null=True),
        ),
        migrations.RunPython(
            code=migrate_str_to_integer
        ),
        migrations.AlterField(
            model_name='source',
            name='numbering_system',
            field=models.IntegerField(blank=True, choices=[(1, 'Mixed Foliation and Pagination'), (2, 'Foliation'), (3, 'Pagination'), (4, 'None / Unknown')], max_length=32, null=True),
        ),
        migrations.AlterField(
            model_name='compositioncycle',
            name='composition',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cycles', to='diamm_data.Composition'),
        ),
        migrations.AlterField(
            model_name='source',
            name='end_date',
            field=models.IntegerField(blank=True, help_text='Enter the end year as a four digit integer. If the\n                                   precise year is not known, enter it rounding UP to the\n                                   closest known decade, and then century. Examples: 1456, 1460, 1500.\n                                   ', null=True),
        ),
        migrations.AlterField(
            model_name='source',
            name='numbering_system',
            field=models.IntegerField(blank=True, choices=[(1, 'Mixed Foliation and Pagination'), (2, 'Foliation'), (3, 'Pagination'), (4, 'None / Unknown')], null=True),
        ),
        migrations.AlterField(
            model_name='source',
            name='start_date',
            field=models.IntegerField(blank=True, help_text='Enter the start year as a four digit integer. If\n                                     the precise year is not known, enter it rounding DOWN to the closest\n                                     known decade, and then century. Examples: 1456, 1450, 1400.\n                                     ', null=True),
        ),
        migrations.AlterModelOptions(
            name='compositioncycle',
            options={'ordering': ('order',)},
        ),
        migrations.AddField(
            model_name='page',
            name='page_type',
            field=models.IntegerField(blank=True, choices=[(1, 'Page'), (2, 'Modern Endpapers'), (3, 'Contemporary Endpapers'), (4, 'Flyleaf'), (5, 'Opening'), (6, 'Bindings'), (7, 'Fragment(s)'), (8, 'Scroll'), (9, 'Additional'), (10, 'Secondary')], null=True),
        ),
        migrations.AlterField(
            model_name='compositioncycle',
            name='cycle',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='compositions', to='diamm_data.Cycle'),
        ),
        migrations.AlterField(
            model_name='compositionbibliography',
            name='bibliography',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='compositions', to='diamm_data.Bibliography'),
        ),
        migrations.AlterField(
            model_name='compositionbibliography',
            name='composition',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bibliography', to='diamm_data.Composition'),
        ),
        migrations.RemoveField(
            model_name='person',
            name='roles',
        ),
        migrations.AlterField(
            model_name='personrole',
            name='person',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='roles', to='diamm_data.Person'),
        ),
        migrations.AlterField(
            model_name='personrole',
            name='role',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='people', to='diamm_data.Role'),
        ),
        migrations.AlterField(
            model_name='voice',
            name='label',
            field=models.CharField(blank=True, help_text='Former Text voicepart field', max_length=256, null=True),
        ),
        migrations.AlterField(
            model_name='voice',
            name='position',
            field=models.CharField(blank=True, help_text='Former Text positiononpage field', max_length=256, null=True),
        ),
        migrations.AlterField(
            model_name='voice',
            name='sort_order',
            field=models.IntegerField(blank=True, help_text='Used to sort voices e.g., Soprano, Alto, Tenor, Bass', null=True),
        ),
        migrations.AlterModelOptions(
            name='sourcebibliography',
            options={'verbose_name_plural': 'Source Bibliographies'},
        ),
        migrations.AlterField(
            model_name='personnote',
            name='type',
            field=models.IntegerField(choices=[(1, 'Biography'), (2, 'Variant Name'), (3, 'Date'), (4, 'Bibliography')]),
        ),
        migrations.AlterField(
            model_name='sourcenote',
            name='type',
            field=models.IntegerField(choices=[(1, 'General Description'), (97, 'RISM Description'), (98, 'Census Catalogue of Music Description'), (4, 'Extent Note'), (5, 'Physical Description Note'), (6, 'Binding Note'), (7, 'Ownership Note'), (8, 'Watermark Note'), (9, 'Liminary Note'), (10, 'Notation Note'), (11, 'Date Note'), (12, 'Dedication Note'), (13, 'Ruling Note'), (14, 'Foliation Note'), (15, 'Decoration Note'), (16, 'Contents Note'), (17, 'Surface Note'), (18, 'DIAMM Note'), (99, 'Private Note')]),
        ),
        migrations.AlterField(
            model_name='organization',
            name='location',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='organizations', to='diamm_data.GeographicArea'),
        ),
        migrations.AlterModelOptions(
            name='archivenote',
            options={'ordering': ('archive__name',)},
        ),
        migrations.AlterModelOptions(
            name='page',
            options={'ordering': ['source__shelfmark', 'sort_order']},
        ),
        migrations.AddField(
            model_name='geographicarea',
            name='variant_names',
            field=models.CharField(blank=True, help_text='Separate names with a comma.', max_length=255, null=True),
        ),
        migrations.AlterField(
            model_name='geographicarea',
            name='parent',
            field=models.ForeignKey(blank=True, help_text='If the area is subordinate to another (e.g., city to country),\n                               you can specify this here. For regions where their historical provenance has changed \n                               (e.g., Alsace and France or Germany; Vienna and Austria or Prussia), you should choose the\n                               current affiliation.', null=True, on_delete=django.db.models.deletion.CASCADE, to='diamm_data.GeographicArea'),
        ),
        migrations.AlterField(
            model_name='sourcenote',
            name='type',
            field=models.IntegerField(choices=[(1, 'General Description'), (97, 'RISM Description'), (98, 'Census Catalogue of Music Description'), (4, 'Extent'), (5, 'Physical Description'), (6, 'Binding'), (7, 'Ownership'), (8, 'Watermark'), (9, 'Liminary Note'), (10, 'Notation'), (11, 'Date'), (12, 'Dedication'), (13, 'Ruling'), (14, 'Foliation'), (15, 'Decoration'), (16, 'Contents'), (17, 'Surface'), (18, 'DIAMM Note'), (99, 'Private Note')]),
        ),
        migrations.AlterModelOptions(
            name='notation',
            options={'ordering': ('name',)},
        ),
        migrations.AlterField(
            model_name='archive',
            name='logo',
            field=models.FileField(blank=True, null=True, storage=diamm.helpers.storage.OverwriteStorage(), upload_to='/srv/www.diamm.ac.uk/www/media/archives'),
        ),
        migrations.AlterField(
            model_name='geographicarea',
            name='legacy_id',
            field=models.ManyToManyField(blank=True, to='diamm_data.LegacyId'),
        ),
        migrations.AlterField(
            model_name='item',
            name='incipit',
            field=models.FileField(blank=True, null=True, storage=diamm.helpers.storage.OverwriteStorage(), upload_to='/srv/www.diamm.ac.uk/www/media/rism/incipits'),
        ),
        migrations.AlterField(
            model_name='source',
            name='notations',
            field=models.ManyToManyField(blank=True, related_name='sources', to='diamm_data.Notation'),
        ),
        migrations.AlterField(
            model_name='sourcenote',
            name='type',
            field=models.IntegerField(choices=[(1, 'General Description'), (97, 'RISM Description'), (98, 'Census Catalogue of Music Description'), (4, 'Extent'), (5, 'Physical Description'), (6, 'Binding'), (7, 'Ownership'), (8, 'Watermark'), (9, 'Liminary Note'), (10, 'Notation'), (11, 'Date'), (12, 'Dedication'), (13, 'Ruling'), (14, 'Foliation'), (15, 'Decoration'), (16, 'Index'), (17, 'Surface'), (18, 'DIAMM Note'), (99, 'Private Note')]),
        ),
        migrations.AlterModelOptions(
            name='set',
            options={'ordering': ('cluster_shelfmark',)},
        ),
        migrations.AlterField(
            model_name='item',
            name='page_order',
            field=models.IntegerField(blank=True, default=0, null=True),
        ),
        migrations.AlterField(
            model_name='person',
            name='legacy_id',
            field=models.CharField(blank=True, max_length=64, null=True),
        ),
        migrations.AlterField(
            model_name='archive',
            name='logo',
            field=models.FileField(blank=True, null=True, storage=diamm.helpers.storage.OverwriteStorage(), upload_to='/Users/ahankins/Documents/code/git/diamm/diamm/media/archives'),
        ),
        migrations.AlterField(
            model_name='item',
            name='incipit',
            field=models.FileField(blank=True, null=True, storage=diamm.helpers.storage.OverwriteStorage(), upload_to='/Users/ahankins/Documents/code/git/diamm/diamm/media/rism/incipits'),
        ),
        migrations.AlterField(
            model_name='item',
            name='item_title',
            field=models.CharField(blank=True, help_text='A title for this item record, ONLY if it is NOT linked to a composition. This is for\n                         supplying a name to otherwise untitled things (e.g., "blank page") or \n                         for non-musical titles ("A Poem").\n                         \n                         Use the Source Attribution field to record variant titles for compositions.\n                 ', max_length=1024, null=True),
        ),
        migrations.AlterField(
            model_name='itemcomposer',
            name='composer',
            field=models.ForeignKey(help_text='DO NOT attach a duplicate composer here if this item is attached to a composition.\n                            This field is ONLY to be used to record that a MSS features works by a particular composer,\n                            and should not be used otherwise.', on_delete=django.db.models.deletion.CASCADE, related_name='unattributed_works', to='diamm_data.Person'),
        ),
        migrations.AlterField(
            model_name='itemnote',
            name='type',
            field=models.IntegerField(choices=[(1, 'General Note'), (2, 'Copying Style'), (3, 'Concordances'), (4, 'Layout'), (5, 'Position on Page'), (6, 'Non-music contents description'), (7, 'Indexing or Ordering')]),
        ),
        migrations.AlterField(
            model_name='page',
            name='page_type',
            field=models.IntegerField(blank=True, choices=[(1, 'Page'), (2, 'Modern Endpapers'), (3, 'Contemporary Endpapers'), (4, 'Flyleaf'), (5, 'Opening'), (6, 'Bindings'), (7, 'Fragment(s)'), (8, 'Scroll'), (9, 'Additional'), (10, 'Secondary')], default=1, null=True),
        ),
        migrations.AlterField(
            model_name='page',
            name='sort_order',
            field=models.IntegerField(blank=True, default=0, null=True),
        ),
        migrations.DeleteModel(
            name='PageCondition',
        ),
        migrations.AlterField(
            model_name='archive',
            name='logo',
            field=models.FileField(blank=True, null=True, storage=diamm.helpers.storage.OverwriteStorage(), upload_to='archives/'),
        ),
        migrations.AlterField(
            model_name='item',
            name='incipit',
            field=models.FileField(blank=True, null=True, storage=diamm.helpers.storage.OverwriteStorage(), upload_to='rism/incipits/'),
        ),
        migrations.AlterField(
            model_name='bibliographypublication',
            name='type',
            field=models.IntegerField(choices=[(1, 'Volume Number'), (2, 'Title of Parent Entry (i.e., Book title, Journal title)'), (3, 'Title and Location of Publisher'), (4, 'Pages'), (5, 'University and Department (for Dissertations)'), (6, 'Degree (for Dissertations)'), (8, 'Series Title (NB: Use Parent Title for journal names)'), (9, 'URL'), (10, 'URL Accessed Date'), (11, 'Translator Statement'), (12, 'Festschrift Dedicatee'), (13, 'Place of Publication'), (14, 'Number of Volumes in Series'), (15, 'ISBN/ISSN/ISMN')]),
        ),
        migrations.AlterModelOptions(
            name='bibliography',
            options={'ordering': ('created',), 'verbose_name': 'Bibliography entry', 'verbose_name_plural': 'Bibliography entries'},
        ),
        migrations.AlterModelOptions(
            name='item',
            options={'ordering': ('source_order', 'folio_start')},
        ),
        migrations.AlterModelOptions(
            name='sourcecatalogueentry',
            options={'ordering': ('entry',), 'verbose_name_plural': 'Source catalogue entries'},
        ),
        migrations.AlterField(
            model_name='geographicarea',
            name='parent',
            field=models.ForeignKey(blank=True, help_text='If the area is subordinate to another (e.g., city to country),\n                               you can specify this here. For regions where their historical provenance has changed \n                               (e.g., Alsace and France or Germany; Vienna and Austria or Prussia), you should choose the\n                               present affiliation.', null=True, on_delete=django.db.models.deletion.CASCADE, to='diamm_data.GeographicArea'),
        ),
        migrations.AlterField(
            model_name='person',
            name='legacy_id',
            field=models.CharField(blank=True, max_length=64, null=True),
        ),
        migrations.AlterField(
            model_name='page',
            name='page_type',
            field=models.IntegerField(blank=True, choices=[(1, 'Page'), (2, 'Modern Endpapers'), (3, 'Contemporary Endpapers'), (4, 'Flyleaf'), (5, 'Opening'), (6, 'Bindings'), (7, 'Fragment(s)'), (8, 'Scroll'), (9, 'Additional'), (11, 'Pastedown'), (12, 'Offset'), (10, 'Secondary')], default=1, null=True),
        ),
        migrations.AddField(
            model_name='personrole',
            name='earliest_year_approximate',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='personrole',
            name='latest_year_approximate',
            field=models.BooleanField(default=False),
        ),
        migrations.AlterField(
            model_name='bibliographypublication',
            name='type',
            field=models.IntegerField(choices=[(1, 'Volume Number'), (2, 'Title of Parent Entry (i.e., Book title, Journal title)'), (3, 'Title and Location of Publisher'), (4, 'Pages'), (5, 'University and Department (for Dissertations)'), (6, 'Degree (for Dissertations)'), (8, 'Series Title (NB: Use Parent Title for journal names)'), (9, 'URL'), (10, 'URL Accessed Date'), (11, 'Translator Statement'), (12, 'Festschrift Dedicatee'), (13, 'Place of Publication'), (14, 'Number of Volumes in Series'), (15, 'ISBN/ISSN/ISMN'), (99, 'General Note')]),
        ),
        migrations.AlterField(
            model_name='bibliographypublication',
            name='type',
            field=models.IntegerField(choices=[(1, 'Volume Number'), (2, 'Title of Parent Entry (i.e., Book title, Journal title)'), (3, 'Publisher'), (4, 'Pages'), (5, 'University and Department (for Dissertations)'), (6, 'Degree (for Dissertations)'), (8, 'Series Title (NB: Use Parent Title for journal names)'), (9, 'URL'), (10, 'URL Accessed Date'), (11, 'Translator Statement'), (12, 'Festschrift Dedicatee'), (13, 'Place of Publication'), (14, 'Number of Volumes in Series'), (15, 'ISBN/ISSN/ISMN'), (99, 'General Note')]),
        ),
        migrations.AlterField(
            model_name='sourcenote',
            name='author',
            field=models.CharField(blank=True, default=diamm.models.data.source_note.get_default_author, max_length=255, null=True),
        ),
        migrations.CreateModel(
            name='CompositionNote',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.IntegerField(choices=[(1, 'Alternate Title'), (2, 'Pars')])),
                ('note', models.TextField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('composition', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='notes', to='diamm_data.Composition')),
            ],
        ),
    ]
