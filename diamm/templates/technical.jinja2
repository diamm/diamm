{% extends "base.jinja2" %}

{% block content %}
    <div class="row">
        <div class="sixteen columns">
            <h2>Technical Overview</h2>
            <p>
                There are a number of ways of using and contributing to the new DIAMM site that go beyond the main
                public front-end. This page will serve to give an introduction to the tools and technologies that
                make this site function, and provide examples of how you can use the data on this site in your own
                applications.
            </p>
            <h3>Source Code</h3>
            <p>
                The source code for the DIAMM site is available at <a href="https://github.com/DIAMM/diamm">
                https://github.com/DIAMM/diamm</a>. On this page we maintain the latest stable and production
                versions of the site, as well as an issue tracker for monitoring bug reports and feature requests.
            </p>
            <h4>Contributing</h4>
            <p>
                If you wish to contribute to the source, you can do so by submitting a pull request. You should follow this process:

                <ol>
                    <li>Fork the DIAMM source code to your own repository</li>
                    <li>Create a new branch on your repository where you will commit your contributions.</li>
                    <li>Make commits to this branch <em>with descriptive commit messages</em> telling what you changed
                        and why you changed it. Please don't just commit something with the message "commit." This does
                        not help when we review your change for inclusion.</li>
                    <li>When you are ready to have your changes merged "upstream" you should open a pull request. Please
                        describe in as much detail as possible the nature of the change and what you are contributing or
                        fixing. You should make sure you select the 'develop' branch of the DIAMM repository for merging.</li>
                </ol>

                Once we have received your pull request we will review it. We may ask for revisions, in which case you should
                continue to commit to this branch until these are resolved. Your pull request will then be merged into
                the development branch, and then will make its way into the production site on the next release.
            </p>

            <h3>Technology Stack</h3>
            <p>
                The DIAMM site is built using all open-source tools. It is written primarily in Python, using the Django
                web framework with a PostgreSQL back-end. The Solr search engine to provide fast and advanced tools which
                power the full-text search system, and many parts of the source views. On the production site we use
                the NginX web server. Image serving is provided through the IIP Image Server, serving lossless JPEG 2000
                images using the Kakadu JPEG 2000 library.
            </p>

            <h3>Human and machine-readable interfaces</h3>
            <p>
                What follows is a mini-essay on the design philosophy underlying the DIAMM site architecture. You can skip
                directly to the <a href="#api">API documentation</a> if you just came here for that.
            </p>
            <p>
                The Django REST Framework is an integral component of the site, and provides important, but perhaps
                niche, capabilities to the DIAMM site. To understand what role this component plays, it is useful to
                take a step back and consider the role of the lowly URL -- the "Uniform Resource Locator," better
                known as website address that appears in your browser's address bar.
            </p>
            <p>
                Every URL is a globally unique address for a web page. Consider the following URL: <a href="https://beta.diamm.ac.uk/sources/117">
                https://beta.diamm.ac.uk/sources/117</a>. No other web page in the world has this address, and as a result
                it can be considered both an <em>address</em> (URL) and a globally unique <em>identifier</em>; a "Uniform
                Resource Identifier" or URI. In this particular case, the URL given will resolve to a web page that displays
                the information for "Bologna Q.15" on DIAMM. As a URI, the address acts as a sort of global shelfmark, uniquely
                identifying a single object in the global library of the Internet; as a URL, the same address means we
                can load it in our web browser and view the resource.
            </p>
            <p>
                The new DIAMM website is built to adhere the principles of "REpresentational State Transfer," or REST.
                This term was coined by Roy Fielding, and essentially describes the architecture of the Hypertext
                Transfer Protocol, or HTTP -- the protocol through which all web servers and browsers communicate. There are
                a number of very interesting facets to REST, but for the present purposes we will stick to two: Resource
                identifiers and Content negotiation.
            </p>
            <p>
                Resource identification refers to a consistent and uniform method of identifying a resource on a web
                server. Consider again the URI <a href="https://beta.diamm.ac.uk/sources/117">
                https://beta.diamm.ac.uk/sources/117/</a>. This URI points to a resource, which is broadly defined as
                "anything that's important enough to be referenced as a thing in itself" (Richardson and Ruby 2007, 81).
                Put another way, a resource functions as a noun within a web-site, and every URI points to a unique person,
                place, or thing. In a resource-oriented architecture, we build a web site centred on creating identifiers
                for all of the nouns that we are interested in; in the case of the DIAMM website, this includes sources, people,
                compositions, and even relationships between these things. Each of these has a unique URI that can
                identify them in a global context.
            </p>
            <p>
                The second, content negotiation, speaks to the flexibility of representation of a resource in an electronic
                context. Take, for example, the web page you view when you call up the DIAMM page for <a href="https://beta.diamm.ac.uk/sources/117">
                Q.15</a>. Although it goes largely un-remarked, this particular representation of the resource is encoded
                using the HyperText Markup Language (HTML), the <em>lingua franca</em> of the web. This representation is
                drawn on your screen in a human-friendly way, using fonts, colours, and images to show the information associated
                with this resource.
            </p>
            <p>
                But what if we are interested in other representations of this resource? What if, in particular, we are
                not interested in human readability, but in machine processability? We might be interested in integrating
                some data from this resource with other websites, or visualizing a certain metric based on the data we can
                extract. In this case, the human-readable representation is cumbersome and imprecise, designed for display
                but not for analysis.
            </p>
            <p>
                Within the HTTP specification there is the ability for machines to 'negotiate' the resource representation
                that best suits their needs. If a web browser requests HTML, it can receive HTML. However, if a mobile
                app just wants to display a portion of the data&mdash;for example, the title and number of composers&mdash;
                it would be inefficient to try and extract this from the HTML. Instead, clients like mobile applications
                may request different representations of the resource, providing an alternate view on the data. This process
                is called content negotiation.
            </p>
            <p>
                When you tie the two parts together&mdash;resource identification and content negotiation&mdash;you have
                a system that is capable of providing a consistent identification system that is valid for both human
                and computer processing. A scholar may view a page for a source, copy the link into their web application,
                and have that application visualize that source in a different way. A computer system may analyze patterns
                in a corpus of materials, and provide links to human-readable results found on the DIAMM site. Software
                may integrate two systems, providing a way of linking separate but related databases by embedding content
                from one site into another.
            </p>
            <p>
                These components are the backbone of the DIAMM Application Programming Interface (API). An API defines
                how computing resources may take advantage of machine-readable methods to integrate the data from DIAMM
                into external systems. In this site, all resources are exposed through a consistent URI scheme, and all
                resources are able to be retrieved in both HTML and JavaScript Object Notation (JSON) formats.
            </p>
            <h3 id="#api">DIAMM API</h3>
            <p>
                The DIAMM API provides a machine-readable interface to the DIAMM data. In a not altogether glamourous
                way of putting it, the DIAMM API has been developed using the <a href="https://en.wikipedia.org/wiki/Eating_your_own_dog_food">
                "dogfood"</a> principle; that is, the DIAMM site is built on the same API that we make publicly available,
                or we "eat our own dogfood." In practice, this means that the API is well-tested and an integral part
                of the site, not an afterthought.
            </p>
            <p>
                We offer content negotiation for HTML and JSON representations of all DIAMM records. The easiest way to
                view the JSON representation of a record is by appending "format=json" as a query parameter. For example,
                <a href="https://beta.diamm.ac.uk/sources/117/?format=json">https://beta.diamm.ac.uk/sources/117/?format=json</a>.
            </p>
            <p>
                Scripted access can use the Accept header to request JSON response, using the 'application/json' MIME type.
                Using the cURL command-line utility, such a request might look like this:
            </p>
            <pre>
                $> curl -H "Accept: application/json" https://beta.diamm.ac.uk/sources/117/
            </pre>
            <p>
                If you use the Python <a href="http://requests.readthedocs.io/en/master/">Requests</a> module in a script,
                a similar request might look like this:
            </p>
            <pre>
                r = requests.get("https://beta.diamm.ac.uk/sources/117/", headers={"Accept": "application/json"})
            </pre>
            <p>
                Within the JSON response, related entities will usually return a "url" property, pointing to the record
                for that relationship. For example, a composer of a piece in a source might include the following:
            </p>
            <pre>
                composers: [
                    {
                        full_name: "Du Fay, Guillaume",
                        url: "https://beta.diamm.ac.uk/people/91/",
                    }
                ]
            </pre>
            <p>
                In this case, the url property points to the person record for Guillaume Du Fay.
            </p>
            <h4>Search API</h4>
            <p>
                The search system also operates over a REST API. There are two parameters one can pass as query
                parameters to the /search/ endpoint: q, for a full-text record search, and type, to limit results to a particular
                type of record. Consider, for example, the following URL request: <a href="https://beta.diamm.ac.uk/search/?q=byrd">
                https://beta.diamm.ac.uk/search/?q=byrd</a>. Clicking on this in your browser will return a list of
                search results. However, the same result is JSON-serializable with content negotiation, and will perform
                a full-text search, returning a JSON-formatted search result for all records containing the word "byrd" in them.
            </p>

            <p>
                The "type" parameter restricts the type to a certain type of record. The types available are:
                <ul>
                    <li>all (the default): Returns records of all types</li>
                    <li>archive: returns only archive records</li>
                    <li>source: returns only source records</li>
                    <li>sources_with_images: returns only source records that have viewable images</li>
                    <li>person: returns only person records</li>
                    <li>organization: returns only organization records</li>
                    <li>set: returns only set records</li>
                    <li>composition: returns only composition records</li>
                </ul>
            </p>
            <p>
                The result returned will be appropriate for pagination. It will give absolute URLs to the next and
                previous pages, the number of pages, and absolute links to each of the pages. It will also contain
                counts for each of the other types of records.
            </p>
            <p>
                Richardson, L. and S. Ruby. 2007. RESTful web services. Sebastopol, CA: O'Reilly.
            </p>
        </div>
    </div>
{% endblock %}
