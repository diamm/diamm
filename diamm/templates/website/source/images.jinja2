<div class="columns">
    <div class="column is-three-quarters">
        {% if content.has_external_manifest %}
            <div class="notification">
            These images are from an external IIIF service and are not hosted by DIAMM.
            </div>
        {% endif %}
        <div id="diva-wrapper"></div>
    </div>
    <div class="column">
        <div id="diva-page-details"></div>
    </div>
    <script src="/static/vendor/diva.js/diva.js"></script>
    <link rel="stylesheet" href="/static/vendor/diva.js/diva.css" />
    <script>
        function createStructureDataLookup(responseData) /* -> object */
        {
            if (!responseData.hasOwnProperty("structures"))
            {
                return {};
            }
            let rangeLookup = {};
            for (let range of responseData.structures)
            {
                if (!range.hasOwnProperty("canvases"))
                {
                    continue;
                }

                for (let canvasId of range.canvases)
                {
                    if (!rangeLookup.hasOwnProperty(canvasId))
                    {
                        rangeLookup[canvasId] = [];
                    }
                    rangeLookup[canvasId].push(range);

                }
            }

            return rangeLookup;
        }

        function updatePageDetails(currentCanvasLabel, ranges)
        {
            if (ranges.length === 0)
            {
                return null;
            }
            let template = document.getElementById("diva-page-details-template");
            const clone = template.content.cloneNode(true);

            let header = clone.querySelector("slot[name=page-header]");
            header.outerHTML = currentCanvasLabel;

            let detailsBody = clone.querySelector("slot[name=page-range-contents]");
            let contentParent = document.createElement("div");
            detailsBody.replaceWith(contentParent);

            for (let range of ranges)
            {
                let title = document.createElement("h5");
                title.classList.add("title", "is-5", "is-marginless");

                if (range.hasOwnProperty("rendering"))
                {
                    let compositionLink = range.rendering["@id"];
                    let compositionEl = document.createElement("a");
                    compositionEl.setAttribute("href", compositionLink);
                    compositionEl.innerText = range.label;
                    title.appendChild(compositionEl)
                }
                else
                {
                    title.innerText = range.label;
                }
                contentParent.appendChild(title);

                if (!range.hasOwnProperty("metadata"))
                {
                    continue;
                }

                let metaList = document.createElement("dl");
                contentParent.appendChild(metaList);

                let voiceBlock = document.createElement("div");
                contentParent.appendChild(voiceBlock);

                for (let d of range.metadata)
                {
                    let label = document.createElement("dt");
                    label.innerText = d.label;
                    metaList.appendChild(label);

                    let content = document.createElement("dd");
                    metaList.appendChild(content);

                    if (d.value.startsWith("<"))
                    {
                        content.innerHTML = d.value;
                    }
                    else
                    {
                        content.innerText = d.value;
                    }
                }
            }

            let parent = document.getElementById("diva-page-details");
            parent.replaceChildren(clone);
        }

        function updateFromHashParameters(instance)
        {
            const parsedUrl = new URL(window.location.href);
            const hashAndQuery = parsedUrl.hash.split("?");

            let queryParams = "";
            if (hashAndQuery.length > 1)
            {
                queryParams = hashAndQuery[1];
                let params = new URLSearchParams(queryParams);
                if (!params.has('p'))
                    return;

                instance.gotoPageByLabel(params.get("p"));
            }
        }

        let divaInstance = null;


        document.addEventListener("update-diva", function ()
        {
            if (divaInstance && divaInstance.isReady())
            {
                updateFromHashParameters(divaInstance);
            }

        });

        document.addEventListener("initialize-diva", function ()
        {
            if (!divaInstance)
            {
                divaInstance = new Diva("diva-wrapper", {
                    objectData: "{{ content.manifest_url }}",
                    enableAutoTitle: false,
                    fixedHeightGrid: false,
                    enableImageTitles: true
                });

                Diva.Events.subscribe("ViewerDidLoad", function ()
                {
                    // force the document to show in document view on initial load. x
                    this.changeView("document");

                    // When the document is loaded set the contents block to the contents
                    // of the active page. This depends on the ManifestDidLoad process to
                    // generate the rangeLookup property first, but ViewerDidLoad should be
                    // the last thing to fire on viewer initialization.
                    let currentCanvasId = this.getCurrentCanvas();
                    let ranges = this.rangeLookup[currentCanvasId] || [];
                    updatePageDetails(this.getCurrentCanvasLabel(), ranges);
                    updateFromHashParameters(divaInstance);

                });
                Diva.Events.subscribe("ManifestDidLoad", function (responseData)
                {
                    // add a property to the diva instance that contains a lookup
                    // for matching the canvas ID to one or more ranges.
                    this.rangeLookup = createStructureDataLookup(responseData);
                });
                Diva.Events.subscribe("ActivePageDidChange", function (activePage)
                {
                    let currentCanvasId = this.getCurrentCanvas();
                    let ranges = this.rangeLookup[currentCanvasId] || [];
                    updatePageDetails(this.getCurrentCanvasLabel(), ranges);
                });
            }
        }, false);
    </script>
    <template id="diva-page-details-template">
        <style>
            dt {
                font-weight: bold;
            }
            dd {
                margin: 0;
                padding: 0 0 0.5em 0.5em !important;
            }

            dd > dl > div {
                padding-left: 0.5em !important;
                margin-bottom: 0.5em;
                border-bottom: 1px solid #dedede;
            }
        </style>
        <div class="card is-fullwidth">
            <header class="card-header">
                <h4 class="card-header-title title is-4 is-not-bold">
                    <slot name="page-header">PAGE HEADER</slot>
                </h4>
            </header>
            <div class="card-content">
                <slot name="page-range-contents">RANGE CONTENTS</slot>
            </div>
        </div>
    </template>
</div>
{% if content.archive.copyright %}
<div class="columns">
    <div class="column is-three-quarters">
        <p class="is-pulled-right">
            Images {{ content.archive.copyright }}
        </p>
    </div>
</div>
{% endif %}
