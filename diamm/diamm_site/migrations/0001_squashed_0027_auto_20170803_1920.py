# -*- coding: utf-8 -*-
# Generated by Django 1.11.5 on 2017-12-13 21:50
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import wagtail.wagtailcore.blocks
import wagtail.wagtailcore.fields
import wagtail.wagtailimages.blocks


class Migration(migrations.Migration):

    replaces = [('diamm_site', '0001_initial'), ('diamm_site', '0002_commentary_contentpage_homepage_newsindexpage_newspage_problemreport'), ('diamm_site', '0003_auto_20161216_0723'), ('diamm_site', '0004_contentpage_cover_image'), ('diamm_site', '0005_publicationpage'), ('diamm_site', '0006_auto_20161218_1704'), ('diamm_site', '0007_publicationpage_purchase_link'), ('diamm_site', '0008_contentpage_tmpl'), ('diamm_site', '0009_auto_20161218_2149'), ('diamm_site', '0010_auto_20161220_1646'), ('diamm_site', '0011_dissertationpage'), ('diamm_site', '0012_auto_20161220_1719'), ('diamm_site', '0013_auto_20161220_1724'), ('diamm_site', '0014_remove_dissertationpage_author'), ('diamm_site', '0015_auto_20170119_0958'), ('diamm_site', '0016_auto_20170119_1245'), ('diamm_site', '0017_auto_20170123_1608'), ('diamm_site', '0018_homepage_publications_intro'), ('diamm_site', '0019_publicationpage_show_on_front'), ('diamm_site', '0020_publicationpage_teaser'), ('diamm_site', '0021_auto_20170324_0223'), ('diamm_site', '0022_auto_20170326_0721'), ('diamm_site', '0023_auto_20170527_1613'), ('diamm_site', '0023_auto_20170425_1714'), ('diamm_site', '0024_merge_20170708_2235'), ('diamm_site', '0025_auto_20170716_1222'), ('diamm_site', '0026_auto_20170722_2145'), ('diamm_site', '0027_auto_20170803_1920')]

    initial = True

    dependencies = [
        ('wagtailcore', '0032_add_bulk_delete_page_permission'),
        ('diamm_data', '0010_auto_20170123_1608'),
        ('auth', '0008_alter_user_username_max_length'),
        ('wagtailimages', '0016_deprecate_rendition_filter_relation'),
        ('wagtaildocs', '0007_merge'),
        ('contenttypes', '0002_remove_content_type_name'),
        ('wagtailcore', '0030_index_on_pagerevision_created_at'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUserModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(max_length=255, unique=True, verbose_name='email address')),
                ('first_name', models.CharField(blank=True, max_length=30, null=True, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, null=True, verbose_name='last name')),
                ('affiliation', models.CharField(blank=True, max_length=255, null=True, verbose_name='affiliation')),
                ('legacy_username', models.CharField(blank=True, max_length=255, null=True, verbose_name='legacy username')),
                ('legacy_id', models.IntegerField(blank=True, null=True, verbose_name='legacy id')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
            },
        ),
        migrations.CreateModel(
            name='Commentary',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('comment', models.TextField()),
                ('comment_type', models.IntegerField(choices=[(0, 'Private'), (1, 'Public')])),
                ('object_id', models.PositiveIntegerField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='commentaries', to=settings.AUTH_USER_MODEL)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
            options={
                'ordering': ['created'],
                'verbose_name_plural': 'commentaries',
            },
        ),
        migrations.CreateModel(
            name='ContentPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('body', wagtail.wagtailcore.fields.RichTextField()),
                ('cover_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image')),
                ('tmpl', models.FilePathField(blank=True, match='.*\\.jinja2', max_length=255, null=True, path='/Users/ahankins/Documents/code/git/diamm/diamm/templates/website/cms/content_page', verbose_name='Template')),
            ],
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='HomePage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('carousel', wagtail.wagtailcore.fields.StreamField((('carousel', wagtail.wagtailcore.blocks.StructBlock((('image', wagtail.wagtailimages.blocks.ImageChooserBlock()), ('caption', wagtail.wagtailcore.blocks.TextBlock())), template='website/blocks/carousel.jinja2')),))),
                ('brief_description', wagtail.wagtailcore.fields.RichTextField()),
                ('publications_intro', wagtail.wagtailcore.fields.RichTextField(blank=True, null=True)),
            ],
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='NewsIndexPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('body', wagtail.wagtailcore.fields.RichTextField()),
            ],
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='NewsPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('body', wagtail.wagtailcore.fields.RichTextField()),
                ('summary', models.CharField(max_length=255)),
            ],
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='ProblemReport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField()),
                ('note', models.TextField()),
                ('summary', models.TextField(blank=True, help_text="A summary of the change that was contributed by the user. Used to automatically build a contributor's entry for the record", null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
                ('contributor', models.ForeignKey(blank=True, help_text="Use this field to attach a contribution to a DIAMM user account. By doing this (instead of\n    simply using the 'credit' field) DIAMM users will be able to see a record of their own contributions on their account\n    profile page.", null=True, on_delete=django.db.models.deletion.CASCADE, related_name='problem_reports', to=settings.AUTH_USER_MODEL)),
                ('accepted', models.BooleanField(default=False, help_text="If the change has been accepted as substantive by DIAMM staff, check this box. This will add the record to the linked source's Contributors area.")),
                ('credit', models.CharField(blank=True, help_text='Use this field to acknowledge credit without tying the contribution to a specific user account. A record\n    should either have a contributor or a credit acknowledgement.', max_length=255, null=True)),
                ('internal_note', models.TextField(blank=True, help_text='DIAMM Staff notes', null=True)),
            ],
            options={
                'ordering': ('accepted',),
            },
        ),
        migrations.CreateModel(
            name='PublicationPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('body', wagtail.wagtailcore.fields.RichTextField()),
                ('pricing', wagtail.wagtailcore.fields.StreamField((('price', wagtail.wagtailcore.blocks.StructBlock((('description', wagtail.wagtailcore.blocks.CharBlock()), ('price', wagtail.wagtailcore.blocks.DecimalBlock()), ('purchase_link', wagtail.wagtailcore.blocks.URLBlock())), template='website/blocks/pricing_field.jinja2')),))),
                ('cover_image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.Image')),
                ('show_on_front', models.BooleanField(default=False)),
                ('teaser', models.CharField(blank=True, max_length=255, null=True)),
            ],
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='DissertationPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('abstract', wagtail.wagtailcore.fields.RichTextField()),
                ('university', models.CharField(max_length=255)),
                ('year', models.IntegerField()),
                ('degree', models.CharField(max_length=64)),
                ('attachment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtaildocs.Document')),
                ('author', models.ForeignKey(default=1, on_delete=django.db.models.deletion.PROTECT, related_name='+', to='diamm_data.BibliographyAuthor')),
            ],
            bases=('wagtailcore.page',),
        ),
    ]
